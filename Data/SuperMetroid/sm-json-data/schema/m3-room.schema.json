{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "id": "https://raw.githubusercontent.com/vg-json-data/sm-json-data/master/schema/m3-room.schema.json",
  "definitions": {
    "runway": {
      "$id": "#/definitions/runway",
      "type": "object",
      "required": ["length", "openEnd"],
      "additionalProperties": false,
      "properties": {
        "length": {
          "$id": "#/definitions/runway/properties/length",
          "type": "number",
          "title": "Length",
          "minimum": 0,
          "maximum": 45,
          "description": "Horizontal length of the runway in tiles."
        },
        "openEnd": {
          "$id": "#/definitions/runway/properties/openEnd",
          "type": "integer",
          "minimum": 0,
          "maximum": 2,
          "title": "Number of Open Ends",
          "description": "The number of open ends in the runway. An open end is a runway edge that ends in a dropoff rather than a wall. Each open end adds a bit of extra room.",
          "default": 1
        },
        "gentleUpTiles": {
          "$id": "#/definitions/runway/properties/gentleUpTiles",
          "type": "integer",
          "title": "Gentle Up Tiles",
          "description": "Number of tiles in the runway that gently slope (half a vertical tile) upwards"
        },
        "gentleDownTiles": {
          "$id": "#/definitions/runway/properties/gentleDownTiles",
          "type": "integer",
          "title": "Gentle Down Tiles",
          "description": "Number of tiles in the runway that gently slope (half a vertical tile) downwards"
        },
        "steepUpTiles": {
          "$id": "#/definitions/runway/properties/steepUpTiles",
          "type": "integer",
          "title": "Steep Up Tiles",
          "description": "Number of tiles in the runway that steeply slope (one vertical tile) upwards"
        },
        "steepDownTiles": {
          "$id": "#/definitions/runway/properties/steepDownTiles",
          "type": "integer",
          "title": "Steep Down Tiles",
          "description": "Number of tiles in the runway that steeply slope (one vertical tile) downwards"
        },
        "startingDownTiles": {
          "$id": "#/definitions/runway/properties/startingDownTiles",
          "type": "integer",
          "title": "Steep Down Tiles",
          "description": "Number of tiles at the start of the runway that steeply slope downwards, preventing a stutter."
        }
      }
    },
    "strat": {
      "$id": "#/definitions/strat",
      "type": "object",
      "required": [
        "name",
        "requires"
      ],
      "additionalProperties": false,
      "allOf": [
        {
          "if": {
            "properties": {
              "notable": {"const": true}
            },
            "required": ["notable"]
          },
          "then": {
            "required": ["note"]
          },
          "else": {
            "not": {
              "required": ["reusableRoomwideNotable"]
            }
          }
        }
      ],
      "properties": {
        "link": {
          "$id": "#/definitions/strat/properties/link",
          "type": "array",
          "minItems": 2,
          "maxItems": 2,
          "description": "From & to nodes ID where the strat begins and ends.",
          "items": {
            "type": "integer",
            "title": "Node ID",
            "description": "ID of node within this room where the strat begins or ends"  
          }
        },
        "name": {
          "$id": "#/definitions/strat/properties/name",
          "type": "string",
          "title": "Strat Name",
          "description": "A name for the strat",
          "default": "Base",
          "examples": [
            "Base",
            "Brinstar Reserve Hole-in-one"
          ],
          "pattern": "^(.*)$"
        },
        "notable": {
          "$id": "#/definitions/strat/properties/notable",
          "type": "boolean",
          "default": false
        },
        "reusableRoomwideNotable": {
          "$id": "#/definitions/strat/properties/reusableRoomwideNotable",
          "type": "string",
          "description": "Reference to a roomwide reusable strat. Must match the name of a reusableRoomwideNotable in the room."
        },
        "entranceCondition": {
          "$id": "#/definitions/strat/properties/entranceCondition",
          "type": "object",
          "title": "Entrance Condition",
          "additionalProperties": false,
          "properties": {
            "comeInNormally": {
              "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInNormally",
              "type": "object",
              "title": "Come In Normally",
              "description": "Represents a requirement to come into the room through this door, with no other particular requirements.",
              "additionalProperties": false,
              "properties": {}
            },
            "comeInRunning": {
              "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInRunning",
              "type": "object",
              "title": "Come In Running",
              "description": "Represents a requirement to run in through this door with speed in a specified range.",
              "required": [
                "speedBooster",
                "minTiles"
              ],
              "additionalProperties": false,
              "properties": {
                "speedBooster": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInRunning/properties/speedBooster",
                  "type": ["boolean", "string"],
                  "title": "Speed Booster",
                  "description": "Whether or not this run should be performed with Speed Booster.",
                  "enum": [
                    true,
                    false,
                    "any"
                  ]
                },
                "minTiles": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInRunning/properties/minTiles",
                  "type": "number",
                  "title": "Minimum Speed in Tiles",
                  "description": "The minimum horizontal speed that will satisfy this cross-room requirement, measured in effective runway tiles with dash held."
                },
                "maxTiles": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInRunning/properties/maxTiles",
                  "type": "number",
                  "title": "Maximum Speed in Tiles",
                  "description": "The maximum horizontal speed that will satisfy this cross-room requirement, measured in effective runway tiles with dash held."
                }
              }
            },
            "comeInJumping": {
              "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInJumping",
              "type": "object",
              "title": "Come In Jumping",
              "description": "Represents a requirement that Samus come in by jumping through the door transition.",
              "required": [
                "speedBooster",
                "minTiles"
              ],
              "additionalProperties": false,
              "properties": {
                "speedBooster": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInJumping/properties/speedBooster",
                  "type": ["boolean", "string"],
                  "title": "Speed Booster",
                  "description": "Whether or not this run should be performed with Speed Booster.",
                  "enum": [
                    true,
                    false,
                    "any"
                  ]
                },
                "minTiles": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInJumping/properties/minTiles",
                  "type": "number",
                  "title": "Minimum Speed in Tiles",
                  "description": "The minimum horizontal speed that will satisfy this condition, measured in effective runway tiles with dash held."
                },
                "maxTiles": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInJumping/properties/maxTiles",
                  "type": "number",
                  "title": "Maximum Speed in Tiles",
                  "description": "The maximum horizontal speed that will satisfy this condition, measured in effective runway tiles with dash held."
                }
              }
            },
            "comeInSpaceJumping": {
              "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInSpaceJumping",
              "type": "object",
              "title": "Come In Space Jumping",
              "description": "Represents that Samus must come in by using Space Jump to jump through the bottom of this door.",
              "required": ["speedBooster", "minTiles"],
              "additionalProperties": false,
              "properties": {
                "speedBooster": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInSpaceJumping/properties/speedBooster",
                  "type": ["boolean", "string"],
                  "title": "Speed Booster",
                  "description": "Whether or not this run should be performed with Speed Booster.",
                  "enum": [
                    true,
                    false,
                    "any"
                  ]
                },
                "minTiles": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInSpaceJumping/properties/minTiles",
                  "type": "number",
                  "title": "Minimum Speed in Tiles",
                  "description": "The minimum horizontal speed that will satisfy this condition, measured in effective runway tiles with dash held before jumping."
                },
                "maxTiles": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInJumping/properties/maxTiles",
                  "type": "number",
                  "title": "Maximum Speed in Tiles",
                  "description": "The maximum horizontal speed that will satisfy this condition, measured in effective runway tiles with dash held."
                }
              }
            },
            "comeInShinecharging": {
              "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInShinecharging",
              "type": "object",
              "title": "Come in Shinecharging",
              "description": "Represents a requirement to run into the room with enough space to complete a shinecharge in this room.",
              "required": [
                "length",
                "openEnd"
              ],
              "additionalProperties": false,
              "properties": {
                "length": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInShinecharging/properties/length",
                  "type": "number",
                  "title": "Length",
                  "minimum": 0,
                  "maximum": 45,
                  "description": "Length of the runway in the current room that can be used to complete the shinecharge."
                },
                "openEnd": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInShinecharging/properties/openEnd",
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 1,
                  "title": "Number of Open Ends",
                  "description": "The number of open ends in the runway. An open end is a runway edge that ends in a dropoff rather than a wall. Each open end adds a bit of extra room.",
                  "default": 1
                },
                "gentleUpTiles": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInShinecharging/properties/gentleUpTiles",
                  "type": "integer",
                  "title": "Gentle Up Tiles",
                  "description": "Number of tiles in the runway that gently slope (half a vertical tile) upwards (when running away from the door)"
                },
                "gentleDownTiles": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInShinecharging/properties/gentleDownTiles",
                  "type": "integer",
                  "title": "Gentle Down Tiles",
                  "description": "Number of tiles in the runway that gently slope (half a vertical tile) downwards (when running away from the door)"
                },
                "steepUpTiles": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInShinecharging/properties/steepUpTiles",
                  "type": "integer",
                  "title": "Steep Up Tiles",
                  "description": "Number of tiles in the runway that steeply slope (one vertical tile) upwards (when running away from the door)"
                },
                "steepDownTiles": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInShinecharging/properties/steepDownTiles",
                  "type": "integer",
                  "title": "Steep Down Tiles",
                  "description": "Number of tiles in the runway that steeply slope (one vertical tile) downwards (when running away from the door)"
                }
              }
            },
            "comeInGettingBlueSpeed": {
              "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInGettingBlueSpeed",
              "type": "object",
              "title": "Come in Getting Blue Speed",
              "description": "Represents a requirement to run into the room with enough space to gain blue speed in this room.",
              "required": [
                "length",
                "openEnd"
              ],
              "additionalProperties": false,
              "properties": {
                "length": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInGettingBlueSpeed/properties/length",
                  "type": "number",
                  "title": "Length",
                  "minimum": 0,
                  "maximum": 45,
                  "description": "Length of the runway in the current room that can be used to finish getting blue speed."
                },
                "openEnd": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInGettingBlueSpeed/properties/openEnd",
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 1,
                  "title": "Number of Open Ends",
                  "description": "The number of open ends in the runway. An open end is a runway edge that ends in a dropoff rather than a wall. Each open end adds a bit of extra room.",
                  "default": 1
                },
                "gentleUpTiles": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInGettingBlueSpeed/properties/gentleUpTiles",
                  "type": "integer",
                  "title": "Gentle Up Tiles",
                  "description": "Number of tiles in the runway that gently slope (half a vertical tile) upwards (when running away from the door)"
                },
                "gentleDownTiles": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInGettingBlueSpeed/properties/gentleDownTiles",
                  "type": "integer",
                  "title": "Gentle Down Tiles",
                  "description": "Number of tiles in the runway that gently slope (half a vertical tile) downwards (when running away from the door)"
                },
                "steepUpTiles": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInGettingBlueSpeed/properties/steepUpTiles",
                  "type": "integer",
                  "title": "Steep Up Tiles",
                  "description": "Number of tiles in the runway that steeply slope (one vertical tile) upwards (when running away from the door)"
                },
                "steepDownTiles": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInGettingBlueSpeed/properties/steepDownTiles",
                  "type": "integer",
                  "title": "Steep Down Tiles",
                  "description": "Number of tiles in the runway that steeply slope (one vertical tile) downwards (when running away from the door)"
                },
                "minExtraRunSpeed": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInGettingBlueSpeed/properties/minExtraRunSpeed",
                  "type": "string",
                  "pattern": "^\\$[0-9|A-F]\\.[0-9|A-F]+$",
                  "description": "Minimum extra run speed (in hexadecimal) which will satisfy this condition."
                },
                "maxExtraRunSpeed": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInGettingBlueSpeed/properties/maxExtraRunSpeed",
                  "type": "string",
                  "pattern": "^\\$[0-9|A-F]\\.[0-9|A-F]+$",
                  "description": "Maximum extra run speed (in hexadecimal) which will satisfy this condition."
                }
              }
            },
            "comeInShinecharged": {
              "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInShinecharged",
              "type": "object",
              "title": "Come in Shinecharged",
              "description": "Fulfilled by coming in through this door with a shinespark charge that has at least the given number of frames remaining.",
              "required": [
                "framesRequired"
              ],
              "additionalProperties": false,
              "properties": {
                "framesRequired": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInShinecharged/properties/framesRequired",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 179,
                  "title": "Frames Required",
                  "description": "The minimal number of frames that must be left on the shinespark charge when coming in."
                }
              }
            },
            "comeInShinechargedJumping": {
              "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInShinechargedJumping",
              "type": "object",
              "title": "Come in Shinecharged and Jumping",
              "description": "Fulfilled by jumping through this door from an air room, with a shinespark charge that has at least the given number of frames remaining.",
              "required": [
                "framesRequired"
              ],
              "additionalProperties": false,
              "properties": {
                "framesRequired": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInShinechargedJumping/properties/framesRequired",
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 179,
                  "title": "Frames Required",
                  "description": "The minimal number of frames that must be left on the shinespark charge when coming in."
                }
              }
            },
            "comeInWithSpark": {
              "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInWithSpark",
              "type": "object",
              "title": "Come In With Spark",
              "description": "Represents a requirement that Samus come in by shinesparking through the door.",
              "required": [],
              "additionalProperties": false,
              "properties": {
                "position": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInWithSpark/properties/position",
                  "type": "string",
                  "description": "Required position in the doorway while entering.",
                  "enum": ["top", "bottom"]
                }
              }
            },
            "comeInStutterShinecharging": {
              "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInStutterShinecharging",
              "type": "object",
              "title": "Come In Stutter Shinecharging",
              "description": "Represents that Samus must run through this door with SpeedBooster equipped, immediately after stuttering in the previous room (which must have normal physics). This can be used to set up a short water shinecharge.",
              "required": ["minTiles"],
              "additionalProperties": false,
              "properties": {
                "minTiles": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInStutterShinecharging/properties/minTiles",
                  "type": "number",
                  "title": "Minimum Speed in Tiles",
                  "description": "The minimum amount of effective runway tiles in other room needed for this strat."
                }
              }
            },
            "comeInWithBombBoost": {
              "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInWithBombBoost",
              "type": "object",
              "title": "Come In With Bomb Boost",
              "description": "Represents that Samus must come through this door with a horizontal bomb boost.",
              "required": [],
              "additionalProperties": false,
              "properties": {}
            },
            "comeInWithDoorStuckSetup": {
              "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInWithDoorStuckSetup",
              "type": "object",
              "title": "Come In With Door Stuck Setup",
              "description": "Represents that Samus must come through this door in a way that allows getting stuck in the door (e.g. to set up an X-ray climb).",
              "required": [],
              "additionalProperties": false,
              "properties": {}
            },
            "comeInSpeedballing": {
              "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInSpeedballing",
              "type": "object",
              "title": "Come In Speedballing",
              "description": "Represents that Samus must enter the room either in a speedball from the previous room, or in a process of running, jumping, or falling into a speedball.",
              "required": ["runway"],
              "additionalProperties": false,
              "properties": {
                "runway": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInSpeedballing/properties/runway",
                  "$ref": "#/definitions/runway",
                  "description": "Runway in the current room that is available to complete the speedball."
                }
              }
            },
            "comeInWithTemporaryBlue": {
              "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInWithTemporaryBlue",
              "type": "object",
              "title": "Come In With Temporary Blue",
              "description": "Represents that Samus must come in by jumping through this door with temporary blue.",
              "required": [],
              "additionalProperties": false,
              "properties": {
                "direction": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInWithTemporaryBlue/properties/direction",
                  "type": "string",
                  "description": "Direction that Samus must be facing through the transition (applicable only to vertical transitions).",
                  "enum": ["left", "right", "any"]
                }
              }
            },
            "comeInBlueSpinning": {
              "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInBlueSpinning",
              "type": "object",
              "title": "Come In Blue Spinning",
              "description": "Represents that Samus must come in with a spin jump through the doorway while having blue speed.",
              "required": ["unusableTiles"],
              "additionalProperties": false,
              "properties": {
                "minExtraRunSpeed": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInBlueSpinning/properties/minExtraRunSpeed",
                  "type": "string",
                  "pattern": "^\\$[0-9|A-F]\\.[0-9|A-F]+$",
                  "description": "Minimum extra run speed (in hexadecimal) which will satisfy this condition."
                },
                "maxExtraRunSpeed": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInBlueSpinning/properties/maxExtraRunSpeed",
                  "type": "string",
                  "pattern": "^\\$[0-9|A-F]\\.[0-9|A-F]+$",
                  "description": "Maximum extra run speed (in hexadecimal) which will satisfy this condition."
                },
                "unusableTiles": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInBlueSpinning/properties/unusableTiles",
                  "type": "number",
                  "title": "Unusable Tiles",
                  "description": "For a runway connected to the door, the number of tiles before the door that are unusable for gaining blue speed, because of needing to jump."
                }
              }
            },
            "comeInWithMockball": {
              "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInWithMockball",
              "type": "object",
              "title": "Come In With Mockball",
              "description": "Represents that Samus must roll into the room in a mockball with a certain amount of speed.",
              "required": [],
              "additionalProperties": false,
              "properties": {
                "adjacentMinTiles": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInWithMockball/properties/adjacentMinTiles",
                  "type": "number",
                  "title": "Minimum Tiles for Adjacent Runway",
                  "description": "The minimum effective runway tiles available in front of the door for gaining speed and entering a mockball."
                },
                "remoteAndLandingMinTiles": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInWithMockball/properties/remoteAndLandingMinTiles",
                  "type": "array",
                  "title": "Minimum Tiles for Remote and Landing Runways",
                  "items": {
                    "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInWithMockball/properties/remoteAndLandingMinTiles/items",
                    "type": "array",
                    "minItems": 2,
                    "maxItems": 2,
                    "items": {
                      "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInWithMockball/properties/remoteAndLandingMinTiles/items/items",
                      "type": "number"
                    }
                  }
                }
              },
              "anyOf": [
                {"required": ["adjacentMinTiles"]},
                {"required": ["remoteAndLandingMinTiles"]}
              ]
            },
            "comeInWithSpringBallBounce": {
              "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInWithSpringBallBounce",
              "type": "object",
              "title": "Come In With Spring Ball Bounce",
              "description": "Represents that Samus must jump into the room with a spring ball bounce in the doorway of the previous room.",
              "required": ["movementType"],
              "additionalProperties": false,
              "properties": {
                "movementType": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInWithSpringBallBounce/properties/movementType",
                  "type": "string",
                  "title": "Movement Type",
                  "enum": ["controlled", "uncontrolled", "any"],
                  "description": "The type of bounce to enter with."
                },
                "adjacentMinTiles": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInWithSpringBallBounce/properties/adjacentMinTiles",
                  "type": "number",
                  "title": "Minimum Tiles for Adjacent Runway",
                  "description": "The minimum effective runway tiles available in front of the door for gaining speed and jumping into a bounce."
                },
                "remoteAndLandingMinTiles": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInWithSpringBallBounce/properties/remoteAndLandingMinTiles",
                  "type": "array",
                  "title": "Minimum Tiles for Remote and Landing Runways",
                  "description": "Possible minimum values for combinations of remote runway length and landing length.",
                  "items": {
                    "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInWithSpringBallBounce/properties/remoteAndLandingMinTiles/items",
                    "type": "array",
                    "minItems": 2,
                    "maxItems": 2,
                    "items": {
                      "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInWithSpringBallBounce/properties/remoteAndLandingMinTiles/items/items",
                      "type": "number"
                    }
                  }
                }
              },
              "anyOf": [
                {"required": ["adjacentMinTiles"]},
                {"required": ["remoteAndLandingMinTiles"]}
              ]
            },
            "comeInWithBlueSpringBallBounce": {
              "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInWithBlueSpringBallBounce",
              "type": "object",
              "title": "Come In With Blue Spring Ball Bounce",
              "description": "Represents that Samus must jump into the room with a blue spring ball bounce in the doorway of the previous room.",
              "required": ["movementType"],
              "additionalProperties": false,
              "properties": {
                "movementType": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInWithBlueSpringBallBounce/properties/movementType",
                  "type": "string",
                  "title": "Movement Type",
                  "enum": ["controlled", "uncontrolled", "any"],
                  "description": "The type of bounce to enter with."
                },
                "minExtraRunSpeed": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInWithBlueSpringBallBounce/properties/minExtraRunSpeed",
                  "type": "string",
                  "pattern": "^\\$[0-9|A-F]\\.[0-9|A-F]+$",
                  "description": "Minimum extra run speed (in hexadecimal) which will satisfy this condition."
                },
                "maxExtraRunSpeed": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInWithBlueSpringBallBounce/properties/maxExtraRunSpeed",
                  "type": "string",
                  "pattern": "^\\$[0-9|A-F]\\.[0-9|A-F]+$",
                  "description": "Maximum extra run speed (in hexadecimal) which will satisfy this condition."
                },
                "minLandingTiles": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInWithBlueSpringBallBounce/properties/minLandingTiles",
                  "type": "number",
                  "description": "Minimum length of landing runway which will satisfy this condition."
                }
              }
            },
            "comeInWithStoredFallSpeed": {
              "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInWithStoredFallSpeed",
              "type": "object",
              "title": "Come in With Stored Fall Speed",
              "description": "Represents that Samus has stored a high vertical fall speed value that will clip through the floor with the next use of Moonfall.",
              "required": ["fallSpeedInTiles"],
              "additionalProperties": false,
              "properties": {
                "fallSpeedInTiles": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInWithStoredFallSpeed/properties/fallSpeedInTiles",
                  "type": "integer",
                  "title": "Fall Speed in Tiles",
                  "description": "The number of tiles Samus would clip through by Moonfalling on top of a solid floor.",
                  "maximum": 2
                }
              }
            },
            "comeInWithRMode": {
              "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInWithRMode",
              "type": "object",
              "title": "Come in With R-Mode",
              "description": "Represents that Samus must obtain R-mode coming through this door.",
              "required": [],
              "additionalProperties": false,
              "properties": {}
            },
            "comeInWithGMode": {
              "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInWithGMode",
              "type": "object",
              "title": "Come in With G-Mode",
              "description": "Represents that Samus must have or obtain G-mode coming through this door.",
              "required": [
                "mode",
                "morphed"
              ],
              "additionalProperties": false,
              "properties": {
                "mode": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInWithGMode/properties/mode",
                  "type": "string",
                  "enum": [
                    "direct",
                    "indirect",
                    "any"
                  ],
                  "title": "Mode",
                  "description": "Whether we must come in with direct G-mode, indirect G-mode, or either"
                },
                "morphed": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInWithGMode/properties/morphed",
                  "type": "boolean",
                  "title": "Artificial Morph",
                  "description": "If true, then the strat assumes entering in a morphed state, either with artificial morph or by having Morph collected."
                },
                "mobility": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInWithGMode/properties/mobility",
                  "type": "string",
                  "enum": [
                    "mobile",
                    "immobile",
                    "any"
                  ],
                  "default": "any",
                  "title": "Mobility",
                  "description": "Whether Samus must come in mobile, immobile, or either."
                }
              }
            },
            "comeInWithWallJumpBelow": {
              "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInWithWallJumpBelow",
              "type": "object",
              "description": "Represents that Samus must come up through this door with momentum by wall-jumping in the door frame below.",
              "required": [],
              "additionalProperties": false,
              "properties": {
                "minHeight": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInWithWallJumpBelow/properties/minHeight",
                  "type": "number",
                  "description": "Minimum height of door frame (tiles below the transition tiles) that will satisfy the condition."
                }
              }
            },
            "comeInWithSpaceJumpBelow": {
              "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInWithSpaceJumpBelow",
              "type": "object",
              "description": "Represents that Samus must come up through this door with momentum by using Space Jump in the door frame below.",
              "required": [],
              "additionalProperties": false,
              "properties": {}
            },
            "comeInWithPlatformBelow": {
              "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInWithPlatformBelow",
              "type": "object",
              "description": "Represents that Samus must come up through this door with momentum by jumping from a platform below, possibly with run speed.",
              "required": [],
              "additionalProperties": false,
              "properties": {
                "minHeight": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInWithPlatformBelow/properties/minHeight",
                  "type": "number",
                  "description": "Minimum height of the platform that will satisfy the condition."
                },
                "maxHeight": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInWithPlatformBelow/properties/maxHeight",
                  "type": "number",
                  "description": "Maximum height of the platform that will satisfy the condition."
                },
                "maxLeftPosition": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInWithPlatformBelow/properties/maxLeftPosition",
                  "type": "number",
                  "description": "Maximum value of the platform leftPosition that will satisfy the condition."
                },
                "minRightPosition": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInWithPlatformBelow/properties/minRightPosition",
                  "type": "number",
                  "description": "Minimum value of the platform rightPosition that will satisfy the condition."
                }
              }
            },
            "comeInWithGrappleTeleport": {
              "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInWithGrappleTeleport",
              "type": "object",
              "description": "Represents that Samus must come into the room while grappling, teleporting Samus to a position in this room corresponding to the location of the (grapple) block in the other room.",
              "required": ["blockPositions"],
              "additionalProperties": false,
              "properties": {
                "blockPositions": {
                  "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInWithGrappleTeleport/properties/blockPositions",
                  "type": "array",
                  "description": "A list of tile coordinates of (grapple) blocks that Samus could be grappled to while exiting the other room.",
                  "items": {
                    "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInWithGrappleTeleport/properties/blockPositions/items",
                    "type": "array",
                    "description": "Coordinates of a (grapple) block that Samus could be grappled to while exiting the other room.",
                    "minItems": 2,
                    "maxItems": 2,
                    "items": {
                      "$id": "#/definitions/strat/properties/entranceCondition/properties/comeInWithGrappleTeleport/properties/blockPositions/items/items",
                      "type": "integer",
                      "description": "X or Y coordinate measured as a tile count, with 0 representing the top or left-most tile of the other room."
                    }
                  }
                }
              }              
            },
            "comesThroughToilet": {
              "$id": "#/definitions/strat/properties/entranceCondition/properties/comesThroughToilet",
              "type": "string",
              "description": "For a strat having an entranceCondition through a vertical transition, indicates whether the strat is applicable if the Toilet comes between this room and the room with the exitCondition.",
              "default": "no",
              "enum": [
                "no",
                "yes",
                "any"
              ]
            },
            "devNote": {
              "$ref" : "m3-note.schema.json#/definitions/devNote",
              "$id": "#/definitions/strat/properties/entranceCondition/properties/devNote"
            }
          },
          "oneOf": [
            {"required": ["comeInNormally"]},
            {"required": ["comeInRunning"]},
            {"required": ["comeInJumping"]},
            {"required": ["comeInSpaceJumping"]},
            {"required": ["comeInShinecharging"]},
            {"required": ["comeInGettingBlueSpeed"]},
            {"required": ["comeInShinecharged"]},
            {"required": ["comeInShinechargedJumping"]},
            {"required": ["comeInWithSpark"]},
            {"required": ["comeInWithBombBoost"]},
            {"required": ["comeInStutterShinecharging"]},
            {"required": ["comeInWithDoorStuckSetup"]},
            {"required": ["comeInSpeedballing"]},
            {"required": ["comeInWithTemporaryBlue"]},
            {"required": ["comeInWithMockball"]},
            {"required": ["comeInWithSpringBallBounce"]},
            {"required": ["comeInWithBlueSpringBallBounce"]},
            {"required": ["comeInBlueSpinning"]},
            {"required": ["comeInWithStoredFallSpeed"]},
            {"required": ["comeInWithRMode"]},
            {"required": ["comeInWithGMode"]},
            {"required": ["comeInWithWallJumpBelow"]},
            {"required": ["comeInWithSpaceJumpBelow"]},
            {"required": ["comeInWithPlatformBelow"]},
            {"required": ["comeInWithGrappleTeleport"]}
          ]
        },
        "requires": {
          "$ref" : "m3-requirements.schema.json#/definitions/logicalRequirements",
          "$id": "#/definitions/strat/properties/requires",
          "title": "Strat Requirements",
          "description": "Equipment, tech, and flag requirements to execute this strat."
        },
        "exitCondition": {
          "$id": "#/definitions/strat/properties/exitCondition",
          "type": "object",
          "title": "Exit Condition",
          "additionalProperties": false,
          "minProperties": 1,
          "maxProperties": 1,
          "properties": {
            "leaveNormally": {
              "$id": "#/definitions/strat/properties/exitCondition/properties/leaveNormally",
              "type": "object",
              "title": "Leave Normally",
              "description": "Represents that Samus can leave through this door in a 'normal' way, by walking, falling, or jumping.",
              "additionalProperties": false,
              "properties": {}
            },
            "leaveWithRunway": {
              "$id": "#/definitions/strat/properties/exitCondition/properties/leaveWithRunway",
              "type": "object",
              "title": "Leave With Runway",
              "description": "Represents that Samus can leave through this door using a runway of specified geometry. The specific way that the runway is used depends on the 'entranceCondition' in the next room.",
              "additionalProperties": false,
              "required": [
                "length",
                "openEnd"
              ],
              "properties": {
                "length": {
                  "$id": "#/definitions/strat/properties/exitCondition/properties/leaveWithRunway/properties/length",
                  "type": "number",
                  "title": "Length",
                  "minimum": 0,
                  "maximum": 45,
                  "description": "Length of this Runway"
                },
                "openEnd": {
                  "$id": "#/definitions/strat/properties/exitCondition/properties/leaveWithRunway/properties/openEnd",
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 1,
                  "title": "Number of Open Ends",
                  "description": "The number of open ends in the runway. An open end is a runway edge that ends in a dropoff rather than a wall. Each open end adds a bit of extra room.",
                  "default": 1
                },
                "gentleUpTiles": {
                  "$id": "#/definitions/strat/properties/exitCondition/properties/leaveWithRunway/properties/gentleUpTiles",
                  "type": "integer",
                  "title": "Gentle Up Tiles",
                  "description": "Number of tiles in the runway that gently slope (half a vertical tile) upwards (when running towards the door)"
                },
                "gentleDownTiles": {
                  "$id": "#/definitions/strat/properties/exitCondition/properties/leaveWithRunway/properties/gentleDownTiles",
                  "type": "integer",
                  "title": "Gentle Down Tiles",
                  "description": "Number of tiles in the runway that gently slope (half a vertical tile) downwards (when running towards the door)"
                },
                "steepUpTiles": {
                  "$id": "#/definitions/strat/properties/exitCondition/properties/leaveWithRunway/properties/steepUpTiles",
                  "type": "integer",
                  "title": "Steep Up Tiles",
                  "description": "Number of tiles in the runway that steeply slope (one vertical tile) upwards (when running towards the door)"
                },
                "steepDownTiles": {
                  "$id": "#/definitions/strat/properties/exitCondition/properties/leaveWithRunway/properties/steepDownTiles",
                  "type": "integer",
                  "title": "Steep Down Tiles",
                  "description": "Number of tiles in the runway that steeply slope (one vertical tile) downwards (when running towards the door)"
                },
                "startingDownTiles": {
                  "$id": "#/definitions/strat/properties/exitCondition/properties/leaveWithRunway/properties/startingDownTiles",
                  "type": "integer",
                  "title": "Starting Down Tiles",
                  "description": "Number of tiles at the start of the runway (away from the door) that slope down, preventing a stutter"
                }
              }
            },
            "leaveShinecharged": {
              "$id": "#/definitions/strat/properties/exitCondition/properties/leaveShinecharged",
              "type": "object",
              "title": "Leave Shinecharged",
              "description": "Represents that Samus can leave through this door with a shinespark charge.",
              "required": [
                "framesRemaining"
              ],
              "additionalProperties": false,
              "properties": {
                "framesRemaining": {
                  "$id": "#/definitions/strat/properties/exitCondition/properties/leaveShinecharged/properties/framesRemaining",
                  "anyOf": [
                    {
                      "type": "integer"
                    },
                    {
                      "type": "string",
                      "enum": ["auto"]
                    }
                  ],
                  "title": "Frames Remaining",
                  "minimum": 1,
                  "description": "The number of frames remaining in the shinespark charge when leaving the room."
                }
              }
            },
            "leaveWithTemporaryBlue": {
              "$id": "#/definitions/strat/properties/exitCondition/properties/leaveWithTemporaryBlue",
              "type": "object",
              "title": "Leave With Temporary Blue",
              "description": "Represents that Samus may jump through this door with temporary blue.",
              "required": [],
              "additionalProperties": false,
              "properties": {
                "direction": {
                  "$id": "#/definitions/strat/properties/exitCondition/properties/leaveWithTemporaryBlue/properties/direction",
                  "type": "string",
                  "description": "Direction that Samus is facing through the transition (applicable only to vertical transitions).",
                  "enum": ["left", "right", "any"]
                }
              }
            },
            "leaveWithSpark": {
              "$id": "#/definitions/strat/properties/exitCondition/properties/leaveWithSpark",
              "type": "object",
              "title": "Leave With Spark",
              "description": "Represents that Samus can leave through this door with a shinespark.",
              "required": [],
              "additionalProperties": false,
              "properties": {
                "position": {
                  "$id": "#/definitions/strat/properties/exitCondition/properties/leaveWithSpark/properties/position",
                  "type": "string",
                  "description": "Possible positions in the doorway while exiting.",
                  "enum": ["top", "bottom"]
                }
              }
            },
            "leaveSpinning": {
              "$id": "#/definitions/strat/properties/exitCondition/properties/leaveSpinning",
              "type": "object",
              "title": "Leave Spinning",
              "description": "Represents that Samus can leave through the top or bottom of this door with a spin jump, from a runway not connected to the door.",
              "required": ["remoteRunway"],
              "additionalProperties": false,
              "properties": {
                "remoteRunway": {
                  "$id": "#/definitions/strat/properties/exitCondition/properties/leaveSpinning/properties/runway",
                  "$ref": "#/definitions/runway",
                  "description": "Runway that is available to gain momentum for the spin jump."
                },
                "minExtraRunSpeed": {
                  "$id": "#/definitions/strat/properties/exitCondition/properties/leaveSpinning/properties/minExtraRunSpeed",
                  "type": "string",
                  "pattern": "^\\$[0-9|A-F]\\.[0-9|A-F]+$",
                  "description": "Minimum extra run speed (in hexadecimal) with which it is possible to leave with this condition."
                },
                "maxExtraRunSpeed": {
                  "$id": "#/definitions/strat/properties/exitCondition/properties/leaveSpinning/properties/maxExtraRunSpeed",
                  "type": "string",
                  "pattern": "^\\$[0-9|A-F]\\.[0-9|A-F]+$",
                  "description": "Maximum extra run speed (in hexadecimal) with which it is possible to leave with this condition."
                },
                "blue": {
                  "$id": "#/definitions/strat/properties/exitCondition/properties/leaveSpinning/properties/blue",
                  "type": "string",
                  "enum": ["yes", "no", "any"],
                  "default": "any",
                  "description": "Whether this setup can work for leaving with blue speed or not."
                }
              }
            },
            "leaveWithMockball": {
              "$id": "#/definitions/strat/properties/exitCondition/properties/leaveWithMockball",
              "type": "object",
              "title": "Leave With Mockball",
              "description": "Represents that Samus can leave through this door with a mockball.",
              "required": ["remoteRunway", "landingRunway"],
              "additionalProperties": false,
              "properties": {
                "remoteRunway": {
                  "$id": "#/definitions/strat/properties/exitCondition/properties/leaveWithMockball/properties/remoteRunway",
                  "$ref": "#/definitions/runway",
                  "description": "Runway that is available to gain speed before jumping into a mockball."
                },
                "landingRunway": {
                  "$id": "#/definitions/strat/properties/exitCondition/properties/leaveWithMockball/properties/landingRunway",
                  "$ref": "#/definitions/runway",
                  "description": "Runway that is available to land while entering mockball and gain speed before the transition."
                },
                "minExtraRunSpeed": {
                  "$id": "#/definitions/strat/properties/exitCondition/properties/leaveWithMockball/properties/minExtraRunSpeed",
                  "type": "string",
                  "pattern": "^\\$[0-9|A-F]\\.[0-9|A-F]+$",
                  "description": "Minimum extra run speed (in hexadecimal) with which it is possible to leave with this condition."
                },
                "maxExtraRunSpeed": {
                  "$id": "#/definitions/strat/properties/exitCondition/properties/leaveWithMockball/properties/maxExtraRunSpeed",
                  "type": "string",
                  "pattern": "^\\$[0-9|A-F]\\.[0-9|A-F]+$",
                  "description": "Maximum extra run speed (in hexadecimal) with which it is possible to leave with this condition."
                },
                "blue": {
                  "$id": "#/definitions/strat/properties/exitCondition/properties/leaveWithMockball/properties/blue",
                  "type": "string",
                  "enum": ["yes", "no", "any"],
                  "default": "any",
                  "description": "Whether this setup can work for leaving with blue speed or not."
                }
              }
            },
            "leaveWithSpringBallBounce": {
              "$id": "#/definitions/strat/properties/exitCondition/properties/leaveWithSpringBallBounce",
              "type": "object",
              "title": "Leave With Spring Ball Bounce",
              "description": "Represents that Samus can leave through this door with a spring ball bounce.",
              "required": ["remoteRunway", "landingRunway", "movementType"],
              "additionalProperties": false,
              "properties": {
                "remoteRunway": {
                  "$id": "#/definitions/strat/properties/exitCondition/properties/leaveWithSpringBallBounce/properties/remoteRunway",
                  "$ref": "#/definitions/runway",
                  "description": "Runway that is available to gain speed before jumping."
                },
                "landingRunway": {
                  "$id": "#/definitions/strat/properties/exitCondition/properties/leaveWithSpringBallBounce/properties/landingRunway",
                  "$ref": "#/definitions/runway",
                  "description": "Runway that is available for landing, either for entering a mockball, or for bouncing after an airball."
                },
                "minExtraRunSpeed": {
                  "$id": "#/definitions/strat/properties/exitCondition/properties/leaveWithSpringBallBounce/properties/minExtraRunSpeed",
                  "type": "string",
                  "pattern": "^\\$[0-9|A-F]\\.[0-9|A-F]+$",
                  "description": "Minimum extra run speed (in hexadecimal) with which it is possible to leave with this condition."
                },
                "maxExtraRunSpeed": {
                  "$id": "#/definitions/strat/properties/exitCondition/properties/leaveWithSpringBallBounce/properties/maxExtraRunSpeed",
                  "type": "string",
                  "pattern": "^\\$[0-9|A-F]\\.[0-9|A-F]+$",
                  "description": "Maximum extra run speed (in hexadecimal) with which it is possible to leave with this condition."
                },
                "blue": {
                  "$id": "#/definitions/strat/properties/exitCondition/properties/leaveWithSpringBallBounce/properties/blue",
                  "type": "string",
                  "enum": ["yes", "no", "any"],
                  "default": "any",
                  "description": "Whether this setup can work for leaving with blue speed or not."
                },
                "movementType": {
                  "$id": "#/definitions/strat/properties/exitCondition/properties/leaveWithSpringBallBounce/properties/movementType",
                  "type": "string",
                  "title": "Movement Type",
                  "enum": ["controlled", "uncontrolled", "any"],
                  "description": "The type of bounce to exit with."
                }
              }
            },
            "leaveSpaceJumping": {
              "$id": "#/definitions/strat/properties/exitCondition/properties/leaveSpaceJumping",
              "type": "object",
              "title": "Leave With Space Jump",
              "description": "Represents that Samus can leave through this door with a Space Jump at the bottom of the doorway.",
              "required": ["remoteRunway"],
              "additionalProperties": false,
              "properties": {
                "remoteRunway": {
                  "$id": "#/definitions/strat/properties/exitCondition/properties/leaveSpaceJumping/properties/remoteRunway",
                  "$ref": "#/definitions/runway",
                  "description": "Runway that is available to gain momentum for the Space Jump."
                },
                "minExtraRunSpeed": {
                  "$id": "#/definitions/strat/properties/exitCondition/properties/leaveSpaceJumping/properties/minExtraRunSpeed",
                  "type": "string",
                  "pattern": "^\\$[0-9|A-F]\\.[0-9|A-F]+$",
                  "description": "Minimum extra run speed (in hexadecimal) with which it is possible to leave with this condition."
                },
                "maxExtraRunSpeed": {
                  "$id": "#/definitions/strat/properties/exitCondition/properties/leaveSpaceJumping/properties/maxExtraRunSpeed",
                  "type": "string",
                  "pattern": "^\\$[0-9|A-F]\\.[0-9|A-F]+$",
                  "description": "Maximum extra run speed (in hexadecimal) with which it is possible to leave with this condition."
                },
                "blue": {
                  "$id": "#/definitions/strat/properties/exitCondition/properties/leaveSpaceJumping/properties/blue",
                  "type": "string",
                  "enum": ["yes", "no", "any"],
                  "default": "any",
                  "description": "Whether this setup can work for leaving with blue speed or not."
                }
              }
            },
            "leaveWithStoredFallSpeed": {
              "$id": "#/definitions/strat/properties/exitCondition/properties/leaveWithStoredFallSpeed",
              "type": "object",
              "title": "Leave With Stored Fall Speed",
              "description": "Represents that Samus has stored a high vertical fall speed value that will clip through the floor with the next use of Moonfall.",
              "required": ["fallSpeedInTiles"],
              "additionalProperties": false,
              "properties": {
                "fallSpeedInTiles": {
                  "$id": "#/definitions/strat/properties/exitCondition/properties/leaveWithStoredFallSpeed/properties/fallSpeedInTiles",
                  "type": "integer",
                  "title": "Fall Speed in Tiles",
                  "description": "The number of tiles Samus would clip through by Moonfalling on top of a solid floor.",
                  "maximum": 2
                }
              }
            },
            "leaveWithGModeSetup": {
              "$id": "#/definitions/strat/properties/exitCondition/properties/leaveWithGModeSetup",
              "type": "object",
              "title": "Leave With G-Mode Setup",
              "description": "Represents that Samus can leave through this door while taking damage through the transition, in a pose that would allow using X-Ray on the first frame after the transition. This is for setting up to enter R-mode or direct G-mode in the next room.",
              "required": [],
              "additionalProperties": false,
              "properties": {
                "knockback": {
                  "$id": "#/definitions/strat/properties/exitCondition/properties/leaveWithGModeSetup/properties/knockback",
                  "type": "boolean",
                  "default": true,
                  "title": "Leaves With Knockback",
                  "description": "If true, then Samus gets knockback frames through the transition."
                }
              }
            },
            "leaveWithGMode": {
              "$id": "#/definitions/strat/properties/exitCondition/properties/leaveWithGMode",
              "type": "object",
              "title": "Leave With G-Mode",
              "description": "Represents that Samus can leave through this door while in G-mode, resulting in indirect G-mode in the next room.",
              "required": ["morphed"],
              "additionalProperties": false,
              "properties": {
                "morphed": {
                  "$id": "#/definitions/strat/properties/exitCondition/properties/leaveWithGMode/properties/morphed",
                  "type": "boolean",
                  "title": "Morphed",
                  "description": "If true, then this strat results in leaving the room in a morphed state, either by maintaining artificial morph or by having the Morph item."
                }
              }
            },
            "leaveWithDoorFrameBelow": {
              "$id": "#/definitions/strat/properties/exitCondition/properties/leaveWithDoorFrameBelow",
              "type": "object",
              "description": "Represents that Samus can leave through this door with a jump in the door frame, e.g. using a wall-jump or Space Jump.",
              "required": ["height"],
              "additionalProperties": false,
              "properties": {
                "height": {
                  "$id": "#/definitions/strat/properties/exitCondition/properties/leaveWithDoorFrameBelow/properties/height",
                  "type": "number",
                  "description": "The number of tiles beneath the door transition usable for wall-jumping."
                }
              }
            },
            "leaveWithPlatformBelow": {
              "$id": "#/definitions/strat/properties/exitCondition/properties/leaveWithPlatformBelow",
              "type": "object",
              "description": "Represents that Samus can leave through this door by jumping from a platform below, possibly with run speed.",
              "required": ["leftPosition", "rightPosition", "height"],
              "additionalProperties": false,
              "properties": {
                "height": {
                  "$id": "#/definitions/strat/properties/exitCondition/properties/leaveWithPlatformBelow/properties/height",
                  "type": "number",
                  "description": "The number of tiles between the door transition and the platform. A horizontal slope tile counts as a half tile."
                },
                "leftPosition": {
                  "$id": "#/definitions/strat/properties/exitCondition/properties/leaveWithPlatformBelow/properties/leftPosition",
                  "type": "number",
                  "description": "Position of the left end of the platform, measured as the number of tiles to the right of the center of the door. An open end should be represented as an extra half tile."
                },
                "rightPosition": {
                  "$id": "#/definitions/strat/properties/exitCondition/properties/leaveWithPlatformBelow/properties/rightPosition",
                  "type": "number",
                  "description": "Position of the right end of the platform, measured as the number of tiles to the right of the center of the door. An open end should be represented as an extra half tile."
                }
              }
            },
            "leaveWithGrappleTeleport": {
              "$id": "#/definitions/strat/properties/exitCondition/properties/leaveWithGrappleTeleport",
              "type": "object",
              "description": "Represents that Samus can leave through this door while grappling, which can enable a teleport in the next room.",
              "required": ["blockPositions"],
              "additionalProperties": false,
              "properties": {
                "blockPositions": {
                  "$id": "#/definitions/strat/properties/exitCondition/properties/leaveWithGrappleTeleport/properties/blockPositions",
                  "type": "array",
                  "description": "A list of tile coordinates of (grapple) blocks that Samus could be grappled to while exiting the room.",
                  "items": {
                    "$id": "#/definitions/strat/properties/exitCondition/properties/leaveWithGrappleTeleport/properties/blockPositions/items",
                    "type": "array",
                    "description": "Coordinates of a (grapple) block that Samus could be grappled to while exiting the room.",
                    "minItems": 2,
                    "maxItems": 2,
                    "items": {
                      "$id": "#/definitions/strat/properties/exitCondition/properties/leaveWithGrappleTeleport/properties/blockPositions/items/items",
                      "type": "integer",
                      "description": "X or Y coordinate measured as a tile count, with 0 representing the top or left-most tile of the room."
                    }
                  }
                }
              }              
            }
          }
        },
        "gModeRegainMobility": {
          "$id": "#/definitions/strat/properties/gModeRegainMobility",
          "type": "object",
          "description": "Indicates that this strat allows Samus, after entering with G-mode immobile, to regain mobility (by taking knockback from an enemy) while staying in G-mode.",
          "required": [],
          "additionalProperties": false,
          "properties": {}
        },
        "bypassesDoorShell": {
          "$id": "#/definitions/strat/properties/bypassesDoorShell",
          "type": "boolean",
          "description": "Indicates that this strat allows Samus to exit through the door transition without first unlocking or opening the door.",
          "default": false
        },
        "unlocksDoors": {
          "$id": "#/definitions/strat/properties/unlocksDoors",
          "type": "array",
          "description": "List of possible doors that can be unlocked as part of this strat.",
          "items": {
            "$id": "#/definitions/strat/properties/unlocksDoors/items",
            "type": "object",
            "additionalProperties": false,
            "required": ["types"],
            "properties": {
              "nodeId": {
                "$id": "#/definitions/strat/properties/unlocksDoors/items/properties/nodeId",
                "type": "integer",
                "description": "Node ID of the door which can be unlocked by this strat. If omitted, it is assumed to be the destination node of the strat."
              },
              "types": {
                "$id": "#/definitions/strat/properties/unlocksDoors/items/properties/types",
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "missiles",
                    "super",
                    "powerbomb",
                    "gray",
                    "ammo"
                  ]
                },
                "description": "Types of doors which can be unlocked as part of this strat, with the requirements given in this object."
              },
              "requires": {
                "$id": "#/definitions/strat/properties/unlocksDoors/items/properties/requires",
                "$ref" : "m3-requirements.schema.json#/definitions/logicalRequirements",
                "description": "Logical requirements needed to unlock this door if it is of a matching type."
              },
              "useImplicitRequires": {
                "$id": "#/definitions/strat/properties/unlocksDoors/items/properties/useImplicitRequires",
                "type": "boolean",
                "default": true,
                "description": "Whether standard requirements should be implicitly appended to the `requires`."
              },
              "note": {
                "$ref" : "m3-note.schema.json#/definitions/note",
                "$id": "#/definitions/strat/properties/failures/items/properties/note"
              },
              "devNote": {
                "$ref" : "m3-note.schema.json#/definitions/devNote",
                "$id": "#/definitions/strat/properties/failures/items/properties/devNote"
              }
            }
          }
        },
        "clearsObstacles": {
          "$id": "#/definitions/strat/properties/clearsObstacles",
          "type": "array",
          "title": "Clears Obstacles",
          "description": "The IDs of obstacles that are cleared (if not already cleared) by executing this strat.",
          "items": {
            "type": "string",
            "pattern": "^(.*)$"
          }
        },
        "resetsObstacles": {
          "$id": "#/definitions/strat/properties/resetsObstacles",
          "type": "array",
          "title": "Resets Obstacles",
          "description": "The IDs of obstacles that are reset (i.e. returned to their original not-cleared state) by executing this strat.",
          "items": {
            "type": "string",
            "pattern": "^(.*)$"
          }
        },
        "collectsItems": {
          "$id": "#/definitions/strat/properties/collectsItems",
          "type": "array",
          "title": "Collects Items",
          "description": "A list of node IDs of items that become collected (if not already collected) by executing this strat.",
          "items": {
            "type": "integer"
          }
        },
        "setsFlags": {
          "$id": "#/definitions/strat/properties/setsFlags",
          "type": "array",
          "title": "Sets Flags",
          "description": "A list of names of game flags that are set by executing this strat.",
          "items": {
            "type": "string",
            "pattern": "^(.*)$"
          }
        },
        "flashSuitChecked": {
          "$id": "#/definitions/strat/properties/flashSuitChecked",
          "type": "boolean",
          "title": "Flash Suit Checked",
          "description": "Whether this strat has been checked to be logically sound with respect to its requirements for carrying a flash suit."
        },
        "failures": {
          "$id": "#/definitions/strat/properties/failures",
          "type": "array",
          "title": "Strat Failures",
          "description": "A list of ways the strat can be failed, with the consequences of that failure.",
          "items": {
            "$id": "#/definitions/strat/properties/failures/items",
            "type": "object",
            "required": [ "name" ],
            "not": {
              "required": ["leadsToNode", "softlock"]
            },
            "additionalProperties": false,
            "properties": {
              "name": {
                "$id": "#/definitions/strat/properties/failures/items/properties/name",
                "type": "string",
                "title": "Failure Name",
                "description": "A name that identifies this strat failure.",
                "default": "",
                "pattern": "^(.*)$"
              },
              "leadsToNode": {
                "$id": "#/definitions/strat/properties/failures/items/properties/leadsToNode",
                "type": "integer",
                "title": "Leads to Node",
                "description": "Indicates a node at which Samus ends up when this failure happens."
              },
              "cost": {
                "$ref" : "m3-requirements.schema.json#/definitions/logicalRequirements",
                "$id": "#/definitions/strat/properties/failures/items/properties/cost",
                "title": "Failure Cost",
                "description": "Cost of having this failure happen. This is represented as logical requirements, but only resource requirements make sense - not items or techs."
              },
              "softlock": {
                "$id": "#/definitions/strat/properties/failures/items/properties/softlock",
                "type": "boolean",
                "title": "Softlock",
                "description": "Indicates whether this failure causes a softlock. If missing, this should be viewed as false."
              },
              "note": {
                "$ref" : "m3-note.schema.json#/definitions/note",
                "$id": "#/definitions/strat/properties/failures/items/properties/note"
              },
              "devNote": {
                "$ref" : "m3-note.schema.json#/definitions/devNote",
                "$id": "#/definitions/strat/properties/failures/items/properties/devNote"
              }
            }
          }
        },
        "note": {
          "$ref" : "m3-note.schema.json#/definitions/note",
          "$id": "#/definitions/strat/properties/note"
        },
        "devNote": {
          "$ref" : "m3-note.schema.json#/definitions/devNote",
          "$id": "#/definitions/strat/properties/devNote"
        }
      }
    },
    "yields": {
      "$id": "#/definitions/yields",
      "type": "array",
      "title": "Yields",
      "items": {
        "$id": "#/definitions/yields/items",
        "type": "string"
      }
    },
    "physics": {
      "$id": "#/definitions/physics",
      "title": "Physics",
      "description": "Indicates a kind of SuperMetroid physics",
      "type": "string",
      "enum": [
        "air",
        "water",
        "lava",
        "acid",
        "normal"
      ],
      "pattern": "^(.*)$"
    }
  },
  "type": "object",
  "additionalProperties": false,
  "title": "Super Metroid Room Schema",
  "required": [
    "$schema",
    "id",
    "name",
    "area",
    "subarea",
    "playable",
    "nodes",
    "links",
    "strats"
  ],
  "allOf": [
    {
      "if": {
        "properties": {
          "playable": {"const": true}
        }
      },
      "then": {
        "required": ["roomEnvironments"],
        "properties": {
          "nodes": {
            "items": {
              "allOf": [
                {
                  "if": {
                    "properties": {
                      "nodeType": {"const": "door"}
                    },
                    "not": {
                      "properties": {
                        "nodeSubType": {"const": "elevator"}
                      }
                    }
                  },
                  "then": {
                    "required": ["doorEnvironments"]
                  }
                },
                {
                  "if": {
                    "anyOf": [
                      {
                        "not": {
                          "properties": {
                            "nodeType": {"const": "door"}
                          }
                        }
                      },
                      {
                        "properties": {
                          "nodeSubType": {"const": "elevator"}
                        }
                      }
                    ]
                  },
                  "then": {
                    "not":{
                      "required": ["doorEnvironments"]
                    }
                  }
                }
              ]
            }
          }
        }
      }
    },
    {
      "if": {
        "properties": {
          "playable": {"const": false}
        }
      },
      "then": {
        "not": {
          "required": ["roomEnvironments"]
        },
        "properties": {
          "nodes": {
            "items": {
              "not": {
                "required": ["doorEnvironments"]
              }
            }
          }
        }
      }
    }
  ],
  "properties": {
    "$schema": {
      "type": "string",
      "title": "JSON Schema Path",
      "description": "A path to the definition of this file's JSON schema."
    },
    "id": {
      "$id": "#/properties/id",
      "type": "integer",
      "title": "Room ID",
      "description": "Identifier for this room, unique across the entire game",
      "default": 0,
      "examples": [
        7
      ]
    },
    "name": {
      "$id": "#/properties/name",
      "type": "string",
      "title": "Room Name",
      "description": "As it appears in the SuperMetroid.run wiki",
      "default": "",
      "examples": [
        "Morphing Ball Room"
      ],
      "pattern": "^(.*)$"
    },
    "area": {
      "$id": "#/properties/area",
      "type": "string",
      "title": "Area Name",
      "default": "",
      "examples": [
        "Brinstar"
      ],
      "pattern": "^(.*)$"
    },
    "subarea": {
      "$id": "#/properties/subarea",
      "type": "string",
      "title": "Area Subname",
      "default": "",
      "examples": [
        "Blue"
      ],
      "pattern": "^(.*)$"
    },
    "subsubarea": {
      "$id": "#/properties/subsubarea",
      "type": "string",
      "title": "Area SubSubname",
      "default": "",
      "examples": [
        "Yellow"
      ],
      "pattern": "^(.*)$"
    },
    "playable": {
      "$id": "#/properties/playable",
      "type": "boolean",
      "title": "Playable",
      "description": "Indicates whether any gameplay happens in this room. When this is false, inputs do nothing and momentum is carried over from the previous room to the next one.",
      "default": true
    },
    "note": {
      "$ref" : "m3-note.schema.json#/definitions/note",
      "$id": "#/properties/note"
    },
    "devNote": {
      "$ref" : "m3-note.schema.json#/definitions/devNote",
      "$id": "#/properties/devNote"
    },
    "roomAddress": {
      "$id": "#/properties/roomAddress",
      "type": "string",
      "title": "Room Address",
      "description": "Memory address of this room.",
      "examples": ["0x79E9F", "0x79F11"],
      "pattern": "^(.*)$"
    },
    "roomEnvironments": {
      "$id": "#/properties/roomEnvironments",
      "type": "array",
      "title": "Room Environments",
      "description": "An array of objects that describe the room's environment in certain circumstances. In most cases there's only one that's relevant all the time.",
      "minItems": 1,
      "items": {
        "$id": "#/properties/roomEnvironments/items",
        "type": "object",
        "title": "Room Environment",
        "description": "An object that describes the room-wide portion of the game environment, which can optionally depend on what node Samus entered from.",
        "required": [
          "heated"
        ],
        "additionalProperties": false,
        "properties": {
          "heated": {
            "$id": "#/properties/roomEnvironments/items/properties/heated",
            "title": "Heated",
            "description": "Indicates whether the room is heated",
            "type": "boolean"
          },
          "entranceNodes": {
            "$id": "#/properties/roomEnvironments/items/properties/entranceNodes",
            "title": "Entrance Nodes",
            "description": "The nodes from which Samus must have entered the room for this environment to be applicable. Can be left null if applicable for all nodes.",
            "type": "array",
            "items": {
              "$id": "#/properties/roomEnvironments/items/properties/entranceNodes/items",
              "type": "integer"
            }
          },
          "note": {
            "$ref" : "m3-note.schema.json#/definitions/note",
            "$id": "#/properties/roomEnvironments/items/properties/note"
          },
          "devNote": {
            "$ref" : "m3-note.schema.json#/definitions/devNote",
            "$id": "#/properties/roomEnvironments/items/properties/devNote"
          }
        }
      }
    },
    "nodes": {
      "$id": "#/properties/nodes",
      "type": "array",
      "title": "Nodes; Doors, Elevators, Item Locations, etc",
      "items": {
        "$id": "#/properties/nodes/items",
        "type": "object",
        "title": "Node Object",
        "required": [
          "id",
          "name",
          "nodeType",
          "nodeSubType"
        ],
        "additionalProperties": false,
        "properties": {
          "id": {
            "$id": "#/properties/nodes/items/properties/id",
            "type": "integer",
            "title": "Node ID within Room",
            "default": 0,
            "examples": [
              1
            ]
          },
          "name": {
            "$id": "#/properties/nodes/items/properties/name",
            "type": "string",
            "title": "Node Name",
            "description": "A name that identifies this node",
            "default": "",
            "examples": [
              "Top Left Door"
            ],
            "pattern": "^(.*)$"
          },
          "nodeType": {
            "$id": "#/properties/nodes/items/properties/nodeType",
            "type": "string",
            "title": "Node Type",
            "description": "Examples: door, event, item, junction",
            "default": "",
            "examples": [
              "door",
              "entrance",
              "exit",
              "event",
              "item"
            ],
            "enum": [
              "door",
              "entrance",
              "exit",
              "event",
              "item",
              "junction",
              "utility"
            ],
            "pattern": "^(.*)$"
          },
          "nodeSubType": {
            "$id": "#/properties/nodes/items/properties/nodeSubType",
            "type": "string",
            "title": "Node SubType",
            "default": "",
            "examples": [
              "boss",
              "chozo",
              "hidden",
              "visible"
            ],
            "enum": [
              "boss",
              "chozo",
              "flag",
              "hidden",
              "visible",

              "blue",
              "closedWall",
              "doorway",
              "elevator",
              "eye",
              "gray",
              "green",
              "passage",
              "red",
              "sandpit",
              "vertical",
              "yellow",

              "junction",
              "g-mode",

              "save",
              "missile",
              "energy",
              "ship",
              "map"
            ],
            "pattern": "^(.*)$"
          },
          "nodeItem": {
            "$id": "#/properties/nodes/items/properties/nodeItem",
            "type": "string",
            "title": "Vanilla Item",
            "description": "Item that normally resides at this node in Vanilla"
          },
          "nodeAddress": {
            "$id": "#/properties/nodes/items/properties/nodeAddress",
            "type": "string",
            "title": "Memory Address",
            "description": "Memory address of this location",
            "examples": ["0x0019852", "0x001985e"]
          },
          "doorOrientation": {
            "$id": "#/properties/nodes/items/properties/doorOrientation",
            "type": "string",
            "title": "Door Orientation",
            "description": "The direction that leaving the room through this door will take Samus: left, right, up, or down.",
            "enum": ["left", "right", "up", "down"]
          },
          "doorEnvironments": {
            "$id": "#/properties/nodes/items/properties/doorEnvironments",
            "type": "array",
            "title": "Door Environments",
            "description": "An array of objects that describe the door's environment in certain circumstances. In most cases there's only one that's relevant all the time. This contains portions of the environment that are not room-wide.",
            "minItems": 1,
            "items": {
              "$id": "#/properties/nodes/items/properties/doorEnvironments/items",
              "type": "object",
              "title": "Door Environment",
              "description": "An object that describes the portion of the game environment that can vary by door. This can optionally depend on what node Samus entered from.",
              "required": [
                "physics"
              ],
              "additionalProperties": false,
              "properties": {
                "physics": {
                  "$ref" : "#/definitions/physics",
                  "$id": "#/properties/nodes/items/properties/doorEnvironments/items/properties/physics",
                  "description": "Indicates what kind of physics are active at this door"
                },
                "entranceNodes": {
                  "$id": "#/properties/nodes/items/properties/doorEnvironments/items/properties/entranceNodes",
                  "title": "Entrance Nodes",
                  "description": "The nodes from which Samus must have entered the room for this environment to be applicable. Can be left null if applicable for all nodes.",
                  "type": "array",
                  "items": {
                    "$id": "#/properties/nodes/items/properties/doorEnvironments/items/properties/entranceNodes/items",
                    "type": "integer"
                  }
                },
                "note": {
                  "$ref" : "m3-note.schema.json#/definitions/note",
                  "$id": "#/properties/nodes/items/properties/doorEnvironments/items/properties/note"
                },
                "devNote": {
                  "$ref" : "m3-note.schema.json#/definitions/devNote",
                  "$id": "#/properties/nodes/items/properties/doorEnvironments/items/properties/devNote"
                }
              }
            }
          },
          "useImplicitDoorUnlocks": {
            "$id": "#/definitions/strat/properties/unlocksDoors/items/properties/useImplicitDoorUnlocks",
            "type": "boolean",
            "default": true,
            "description": "Whether a standard strat should implicitly be included for unlocking this node if it is a door node."
          },
          "interactionRequires": {
            "$ref" : "m3-requirements.schema.json#/definitions/logicalRequirements",
            "$id": "#/properties/nodes/items/properties/interactionRequires",
            "title": "Interaction Requirements",
            "description": "Equipment, tech, and flag requirements to interact with this node once it has been reached. This is separate from one-time unlock requirements."
          },
          "spawnAt": {
            "$id": "#/properties/nodes/items/properties/spawnAt",
            "type": "integer",
            "title": "Node to spawn at",
            "description": "ID of the node at which Samus spawns when entering a room through this node. If this is null, Samus just spawns at the node she entered through",
            "default": null
          },
          "locks": {
            "$id": "#/properties/nodes/items/properties/locks",
            "type": "array",
            "title": "Node Locks",
            "description": "An array of corresponding lock and unlock conditions for this node",
            "default": null,
            "items": {
              "$id": "#/properties/nodes/items/properties/locks/items",
              "type": "object",
              "title": "Lock Object",
              "description": "Contains corresponding lock and unlock conditions for a node. If lock condition is missing, the lock is initially active.",
              "required": [ "lockType", "unlockStrats", "name" ],
              "additionalProperties": false,
              "properties": {
                "lockType": {
                  "$id": "#/properties/nodes/items/properties/locks/items/properties/lockType",
                  "type": "string",
                  "title": "Lock Type",
                  "default": "",
                  "enum": [
                    "bossFight",
                    "coloredDoor",
                    "cutscene",
                    "escapeFunnel",
                    "gameFlag",
                    "killEnemies",
                    "permanent",
                    "triggeredEvent"
                  ],
                  "pattern": "^(.*)$"
                },
                "lock": {
                  "$ref" : "m3-requirements.schema.json#/definitions/logicalRequirements",
                  "$id": "#/properties/nodes/items/properties/locks/items/properties/lock",
                  "title": "Lock Requirements",
                  "description": "Equipment, tech, and flag requirements for this node to be locked"
                },
                "name": {
                  "$id": "#/properties/nodes/items/properties/locks/items/properties/name",
                  "title": "Lock Name",
                  "description": "A name to describe the lock."
                },
                "unlockStrats": {
                  "$id": "#/properties/nodes/items/properties/locks/items/properties/unlockStrats",
                  "type": "array",
                  "title": "Unlock Strats",
                  "description": "An array of strats that can be used to unlock the lock.",
                  "items": {
                    "$ref" : "#/definitions/strat",
                    "$id": "#/properties/nodes/items/properties/locks/items/properties/unlockStrats/items"
                  }
                },
                "note": {
                  "$ref" : "m3-note.schema.json#/definitions/note",
                  "$id": "#/properties/nodes/items/properties/locks/items/properties/note"
                },
                "devNote": {
                  "$ref" : "m3-note.schema.json#/definitions/devNote",
                  "$id": "#/properties/nodes/items/properties/locks/items/properties/devNote"
                },
                "yields": {
                  "$ref" : "#/definitions/yields",
                  "$id": "#/properties/nodes/items/properties/locks/items/properties/yields",
                  "description": "A list of flags that are activated by unlocking with this lock."
                }
              }
            }
          },
          "twinDoorAddresses": {
            "$id": "#/properties/nodes/items/properties/twinDoorAddresses",
            "type": [
              "array",
              "null"
            ],
            "title": "Twin Door Addresses",
            "description": "The in-game address of other doors that should always lead to the same destination as this door",
            "items": {
              "$id": "#/properties/nodes/items/properties/twinDoorAddresses/items",
              "type": "object",
              "title": "Twin Door Address",
              "description": "The room and door address of a door that should always lead to the same destination as this door",
              "required": ["roomAddress", "doorAddress"],
              "additionalProperties": false,
              "properties": {
                "roomAddress": {
                  "$id": "#/properties/nodes/items/properties/twinDoorAddresses/items/properties/roomAddress",
                  "type": "string",
                  "title": "Twin's Room Address",
                  "pattern": "^(.*)$"
                },
                "doorAddress": {
                  "$id": "#/properties/nodes/items/properties/twinDoorAddresses/items/properties/doorAddress",
                  "type": "string",
                  "title": "Twin's Door Address",
                  "pattern": "^(.*)$"
                }
              }
            }
          },
          "utility": {
            "$id": "#/properties/nodes/items/properties/utility",
            "type": [
              "array",
              "null"
            ],
            "title": "Utilities",
            "description": "Helping stations at this Node (such as save, refills, or map station)",
            "items": {
              "$id": "#/properties/nodes/items/properties/utility/items",
              "type": "string",
              "enum": [
                "save",
                "missile",
                "super",
                "powerbomb",
                "energy",
                "reserve",
                "map"
              ]
            }
          },
          "viewableNodes": {
            "$id": "#/properties/nodes/items/properties/viewableNodes",
            "type": "array",
            "title": "Viewable Item Nodes",
            "description": "An array of objects describing what item nodes can be viewed from this node, and how.",
            "items": {
              "$id": "#/properties/nodes/items/properties/viewableNodes/items",
              "type": "object",
              "title": "Viewable Node Object",
              "description": "Describes what item nodes can be viewed from this node, and how.",
              "required": [ "id", "strats" ],
              "additionalProperties": false,
              "properties": {
                "id": {
                  "$id": "#/properties/nodes/items/properties/viewableNodes/items/properties/id",
                  "type": "integer",
                  "title": "The ID of the item node that is viewable, within the room.",
                  "default": 0,
                  "examples": [
                    1
                  ]
                },
                "strats" : {
                  "$id": "#/properties/nodes/items/properties/viewableNodes/items/properties/strats",
                  "type": "array",
                  "title": "Viewable Node Strats",
                  "description": "An array of strats that can be executed to view the item.",
                  "items": {
                    "$ref" : "#/definitions/strat",
                    "$id": "#/properties/nodes/items/properties/viewableNodes/items/properties/strats/items"
                  }
                }
              }
            }
          },
          "yields": {
            "$ref" : "#/definitions/yields",
            "$id": "#/properties/nodes/items/properties/yields",
            "description": "A list of flags that are activated by interacting with this node."
          },
          "note": {
            "$ref" : "m3-note.schema.json#/definitions/note",
            "$id": "#/properties/nodes/items/properties/note"
          },
          "devNote": {
            "$ref" : "m3-note.schema.json#/definitions/devNote",
            "$id": "#/properties/nodes/items/properties/devNote"
          }
        }
      }
    },
    "links": {
      "$id": "#/properties/links",
      "type": "array",
      "title": "Links; pathways within the Room",
      "items": {
        "$id": "#/properties/links/items",
        "type": "object",
        "title": "Link",
        "required": [
          "from",
          "to"
        ],
        "additionalProperties": false,
        "properties": {
          "from": {
            "$id": "#/properties/links/items/properties/from",
            "type": "integer",
            "title": "This Link originates at this Node ID within the Room",
            "default": 0,
            "examples": [
              1
            ]
          },
          "to": {
            "$id": "#/properties/links/items/properties/to",
            "type": [
              "array",
              "null"
            ],
            "title": "This Link terminates at this Node ID within the Room",
            "items": {
              "$id": "#/properties/links/items/properties/to/items",
              "type": "object",
              "title": "The Items Schema",
              "required": [
                "id"
              ],
              "additionalProperties": false,
              "properties": {
                "id": {
                  "$id": "#/properties/links/items/properties/to/items/properties/id",
                  "type": "integer",
                  "title": "Target Node ID within the Room",
                  "default": 0,
                  "examples": [
                    2
                  ]
                },
                "note": {
                  "$ref" : "m3-note.schema.json#/definitions/note",
                  "$id": "#/properties/links/items/properties/to/items/properties/note"
                },
                "devNote": {
                  "$ref" : "m3-note.schema.json#/definitions/devNote",
                  "$id": "#/properties/links/items/properties/to/items/properties/devNote"
                }
              }
            }
          }
        }
      }
    },
    "strats": {
      "$id": "#/properties/strats",
      "type": "array",
      "title": "Room Strats",
      "description": "An array of strats that can be used in this room.",
      "items": {
        "$id": "#/properties/strats/items",
        "$ref": "#/definitions/strat"
      }
    },
    "obstacles": {
      "$id": "#/properties/obstacles",
      "type": "array",
      "title": "Obstacles; Things that block your way and can be destroyed, not respawning until the room is reset",
      "items": {
        "$id": "#/properties/obstacles/items",
        "type": "object",
        "title": "Obstacle",
        "required": [
          "id",
          "name",
          "obstacleType"
        ],
        "additionalProperties": false,
        "properties": {
          "id": {
            "$id": "#/properties/obstacles/items/properties/id",
            "type": "string",
            "title": "Obstacle ID within Room. To reduce confusion with nodes, this should be a one-letter String",
            "default": "",
            "examples": ["A", "B"]
          },
          "name": {
            "$id": "#/properties/obstacles/items/properties/name",
            "type": "string",
            "title": "Obstacle Name",
            "default": "",
            "examples": [
              "Top Crumble Blocks"
            ],
            "pattern": "^(.*)$"
          },
          "obstacleType": {
            "$id": "#/properties/obstacles/items/properties/obstacleType",
            "type": "string",
            "title": "Obstacle Type",
            "description": "The main type of obstacle. Examples include 'inanimate', 'enemies', and 'abstract'",
            "default": "",
            "examples": [
              "inanimate",
              "enemies",
              "abstract"
            ],
            "enum": [
              "inanimate",
              "enemies",
              "abstract"
            ],
            "pattern": "^(.*)$"
          },
          "note": {
            "$ref" : "m3-note.schema.json#/definitions/note",
            "$id": "#/properties/obstacles/items/properties/note"
          },
          "devNote": {
            "$ref" : "m3-note.schema.json#/definitions/devNote",
            "$id": "#/properties/obstacles/items/properties/devNote"
          }
        }
      }
    },
    "enemies": {
      "$id": "#/properties/enemies",
      "type": "array",
      "title": "Enemies; Things that try to kill you.",
      "items": {
        "$id": "#/properties/enemies/items",
        "type": "object",
        "title": "Enemies",
        "allOf": [
          {
            "required": [
              "id",
              "groupName",
              "enemyName",
              "quantity"
            ]
          },
          {
            "oneOf": [
              { "required":
                [ "homeNodes" ]
              },
              { "required":
                [ "betweenNodes" ]
              }
            ]
          },
          {
            "oneOf": [
              {
                "required": ["dropRequires"]
              },
              {
                "required": ["farmCycles"]
              },
              {
                "allOf": [
                  {
                    "not": {"required": ["dropRequires"]}
                  },
                  {
                    "not": {"required": ["farmCycles"]}
                  }
                ]
              }
            ]
          }
        ],
        "additionalProperties": false,
        "properties": {
          "id": {
            "$id": "#/properties/enemies/items/properties/id",
            "type": "string",
            "title": "ID",
            "description": "A short identifier, which can be used to reference this enemy group from within the room but which isn't unique across the whole game.",
            "default": "",
            "examples": ["e1"]
          },
          "groupName": {
            "$id": "#/properties/enemies/items/properties/groupName",
            "type": "string",
            "title": "Group name",
            "description": "A name that identifies this enemy group uniquely across the entire game.",
            "default": "",
            "examples": ["Morph Ball Room Sidehoppers"]
          },
          "enemyName": {
            "$id": "#/properties/enemies/items/properties/enemyName",
            "type": "string",
            "title": "Enemy name",
            "description": "The name of the enemy that this enemy group contains.",
            "default": "",
            "examples": [
              "Kihunter (green)"
            ]
          },
          "quantity": {
            "$id": "#/properties/enemies/items/properties/quantity",
            "type": "integer",
            "title": "Quantity",
            "default": "",
            "examples": [
              3
            ]
          },
          "homeNodes": {
            "$id": "#/properties/enemies/items/properties/homeNodes",
            "type": "array",
            "items": {
              "type": "integer"
            },
            "title": "Home Nodes",
            "description": "At what nodes enemies normaly engage you",
            "default": [],
            "examples": [
              [1, 2]
            ]
          },
          "betweenNodes": {
            "$id": "#/properties/enemies/items/properties/betweenNodes",
            "type": "array",
            "items": {
              "type": "integer"
            },
            "title": "Enemies between nodes",
            "description": "Enemies can only be reached while traveling between these two nodes",
            "default": [],
            "minItems": 2,
            "maxItems": 2,
            "examples": [
              [1, 2]
            ]
          },
          "spawn": {
            "$ref" : "m3-requirements.schema.json#/definitions/logicalRequirements",
            "$id": "#/properties/enemies/items/properties/spawn",
            "title": "Spawn Requirements",
            "description": "Equipment, tech, and flag requirements for this enemy to spawn. If null, enemy can spawn from game start."
          },
          "stopSpawn": {
            "$ref" : "m3-requirements.schema.json#/definitions/logicalRequirements",
            "$id": "#/properties/enemies/items/properties/stopSpawn",
            "title": "Stop Spawning Requirements",
            "description": "Equipment, tech, and flag requirements for this enemy to stop spawning. If null, enemy can always spawn once its spawn requirements have been met."
          },
          "dropRequires": {
            "$ref" : "m3-requirements.schema.json#/definitions/logicalRequirements",
            "$id": "#/properties/enemies/items/properties/dropRequires",
            "title": "Drop Requires",
            "description": "Equipment, tech, and flag requirements that are needed to obtain the drop from this enemy without taking any damage. These go on top of what's needed to reach and kill the enemy."
          },
          "farmCycles": {
            "$id": "#/properties/enemies/items/properties/farmCycles",
            "type": "array",
            "title": "Farm Cycles",
            "description": "Only for respawning enemy groups. A list of objects, each of which describes requirements to farm this group of enemies as well as duration of a farm cycle.",
            "items": {
              "$id": "#/properties/enemies/items/properties/farmCycles/items",
              "type": "object",
              "required": [
                "name",
                "cycleFrames",
                "requires"
              ],
              "additionalProperties": false,
              "properties": {
                "name": {
                  "$id": "#/properties/enemies/items/properties/farmCycles/items/properties/name",
                  "type": "string",
                  "title": "Cycle Name",
                  "description": "A name to identify this farming cycle. Only needs to be unique within the enemy group, not globally, and comparable farming cycles executions on different enemy groups should share the same name."
                },
                "cycleFrames": {
                  "$id": "#/properties/enemies/items/properties/farmCycles/items/properties/cycleFrames",
                  "type": "integer",
                  "title": "Cycle Frames",
                  "description": "The number of frames between two full sets of drop pickups for this farming cycle."
                },
                "requires": {
                  "$ref" : "m3-requirements.schema.json#/definitions/logicalRequirements",
                  "$id": "#/properties/enemies/items/properties/farmCycles/items/properties/requires",
                  "title": "Farming Cycle Requirements",
                  "description": "Equipment, tech, and flag requirements to perform this type of farm."
                },
                "note": {
                  "$ref" : "m3-note.schema.json#/definitions/note",
                  "$id": "#/properties/enemies/items/properties/farmCycles/items/properties/note"
                },
                "devNote": {
                  "$ref" : "m3-note.schema.json#/definitions/devNote",
                  "$id": "#/properties/enemies/items/properties/farmCycles/items/properties/devNote"
                }
              }
            }
          },
          "note": {
            "$ref" : "m3-note.schema.json#/definitions/note",
            "$id": "#/properties/enemies/items/properties/note"
          },
          "devNote": {
            "$ref" : "m3-note.schema.json#/definitions/devNote",
            "$id": "#/properties/enemies/items/properties/devNote"
          }
        }
      }
    },
    "reusableRoomwideNotable": {
      "$id": "#/properties/reusableRoomwideNotable",
      "type": "array",
      "title": "Array of Reusable Notable Strats",
      "items": {
        "$id": "#/properties/reusableRoomwideNotable/items",
        "type": "object",
        "title": "Reusable Roomwide Notable Strat",
        "required": [
          "name",
          "note"
        ],
        "additionalProperties": false,
        "properties": {
          "name": {
            "$id": "#/properties/reusableRoomwideNotable/items/properties/name",
            "type": "string",
            "title": "Shared Reusable Roomwide Strat Name",
            "default": "",
            "examples": [
              "Bubble Mountain Damage Boost"
            ],
            "pattern": "^(.*)$"
          },
          "note": {
            "$id": "#/properties/reusableRoomwideNotable/items/properties/note",
            "type": ["string", "array"],
            "title": "Strat Description",
            "description": "A common description for all strats that use this reusable strat",
            "default": "",
            "pattern": "^(.*)$"
          },
          "devNote": {
            "$ref" : "m3-note.schema.json#/definitions/devNote",
            "$id": "#/properties/obstacles/items/properties/devNote"
          }
        }
      }
    }
  }
}
